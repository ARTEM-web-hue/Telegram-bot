import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import re
import math

# Инициализация данных
user_scores = {}  # Словарь для хранения счетов пользователей (id: score)
bot_score = 50  # Начальный счет бота

# Разрешенные чаты
ALLOWED_CHAT_IDS = [-1002426240807, -1002300529651]  # Замените на реальные ID чатов

# Проверка разрешенного чата
def is_allowed_chat(chat_id):
    return chat_id in ALLOWED_CHAT_IDS

# Обработчик команды /start
def start(update, context):
    if not is_allowed_chat(update.effective_chat.id):
        update.message.reply_text("Этот бот доступен только в определенных чатах.")
        return
    update.message.reply_text("Привет! Это бот для подсчета очков. Используйте /help для получения информации.")

# Обработчик команды /help
def help_command(update, context):
    if not is_allowed_chat(update.effective_chat.id):
        update.message.reply_text("Этот бот доступен только в определенных чатах.")
        return
    update.message.reply_text("Хочешь добавить этого бота в свой чат или сделать своего на заказ? Пиши @artemax102")

# Обработчик команды /chatchet
def chatchet(update, context):
    if not is_allowed_chat(update.effective_chat.id):
        update.message.reply_text("Этот бот доступен только в определенных чатах.")
        return
    total_score = sum(score for user_id, score in user_scores.items() if score >= 51)
    update.message.reply_text(f"Общее количество баллов у игроков (у которых 51 и больше): {total_score}")

# Обработчик команды /chatone
def chatone(update, context):
    if not is_allowed_chat(update.effective_chat.id):
        update.message.reply_text("Этот бот доступен только в определенных чатах.")
        return
    sorted_users = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)
    message = ""
    rank_emotes = ["🥇", "🥈", "🥉"]
    place = 1
    for user_id, score in sorted_users:
        if score > 51:
            user = context.bot.get_chat_member(chat_id=update.effective_chat.id, user_id=user_id).user
            username = user.username if user.username else "NoUsername"
            rank = rank_emotes[place - 1] if place <= 3 else ""
            message += f"({place})🏆 Добавки:{math.floor((score - 50) * 6)}🎯 Счёт:{score}💥 Игрок (@{username}) Ранг: {rank}\n"
            place += 1
    if not message:
        message = "Нет игроков с более чем 51 очком."
    update.message.reply_text(message)

# Обработчик команды /spsbot
def spsbot(update, context):
    if not is_allowed_chat(update.effective_chat.id):
        update.message.reply_text("Этот бот доступен только в определенных чатах.")
        return
    global bot_score
    bot_score += 5
    update.message.reply_text("К счету бота добавлено 5 очков!")

# Обработчик команды /spshki
def spshki(update, context):
    if not is_allowed_chat(update.effective_chat.id):
        update.message.reply_text("Этот бот доступен только в определенных чатах.")
        return
    update.message.reply_text(f"Текущий счет бота: {bot_score}")

# Обработчик сообщений для реакций
def handle_message(update, context):
    if not is_allowed_chat(update.effective_chat.id):
        return
    global user_scores
    message = update.message.text.lower()
    reply_to_message = update.message.reply_to_message

    if reply_to_message and reply_to_message.from_user.id != context.bot.id:
        target_user_id = reply_to_message.from_user.id
        if target_user_id not in user_scores:
            user_scores[target_user_id] = 50

        if any(word in message for word in ["+", "спс", "пж", "спасибо", "пожалуйста", "молодец", "привет", "пока"]):
            sender_score = user_scores.get(update.message.from_user.id, 50)
            points_to_add = math.ceil(sender_score / 6)
            user_scores[target_user_id] += points_to_add
            update.message.reply_text(f"Игроку @{reply_to_message.from_user.username} добавлено {points_to_add} очков!")

# Основная функция
def main():
    TOKEN = "7272942350:AAFMIlSmk1578vwHwocD0Ny-pNOyM3g8o6c"  # Замените на ваш токен бота
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # Добавление обработчиков команд
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("chatchet", chatchet))
    dp.add_handler(CommandHandler("chatone", chatone))
    dp.add_handler(CommandHandler("spsbot", spsbot))
    dp.add_handler(CommandHandler("spshki", spshki))

    # Добавление обработчика сообщений
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    # Запуск бота
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
